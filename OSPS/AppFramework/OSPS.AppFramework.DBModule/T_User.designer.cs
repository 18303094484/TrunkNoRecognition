#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1873
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OSPS.AppFramework.DBModule
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "OSPS")]
    public partial class T_UserDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertT_User(T_User instance);
        partial void UpdateT_User(T_User instance);
        partial void DeleteT_User(T_User instance);
        partial void InsertT_Group(T_Group instance);
        partial void UpdateT_Group(T_Group instance);
        partial void DeleteT_Group(T_Group instance);
        partial void InsertT_Module(T_Module instance);
        partial void UpdateT_Module(T_Module instance);
        partial void DeleteT_Module(T_Module instance);
        partial void InsertT_Rule(T_Rule instance);
        partial void UpdateT_Rule(T_Rule instance);
        partial void DeleteT_Rule(T_Rule instance);
        #endregion

        public T_UserDataContext() :
            base(global::OSPS.AppFramework.DBModule.Properties.Settings.Default.OSPSConnectionString, mappingSource)
        {
            OnCreated();
        }

        public T_UserDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public T_UserDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public T_UserDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public T_UserDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<T_User> T_User
        {
            get
            {
                return this.GetTable<T_User>();
            }
        }

        public System.Data.Linq.Table<T_Group> T_Group
        {
            get
            {
                return this.GetTable<T_Group>();
            }
        }

        public System.Data.Linq.Table<T_Module> T_Module
        {
            get
            {
                return this.GetTable<T_Module>();
            }
        }

        public System.Data.Linq.Table<T_Rule> T_Rule
        {
            get
            {
                return this.GetTable<T_Rule>();
            }
        }
    }

    [Table(Name = "dbo.T_User")]
    public partial class T_User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _F_Id;

        private string _F_Name;

        private string _F_Password;

        private int _F_Value;

        private int _F_GroupId;

        private bool _f_Enable;

        private string _F_Description;

        private EntityRef<T_Group> _T_Group;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnF_IdChanging(int value);
        partial void OnF_IdChanged();
        partial void OnF_NameChanging(string value);
        partial void OnF_NameChanged();
        partial void OnF_PasswordChanging(string value);
        partial void OnF_PasswordChanged();
        partial void OnF_ValueChanging(int value);
        partial void OnF_ValueChanged();
        partial void OnF_GroupIdChanging(int value);
        partial void OnF_GroupIdChanged();
        partial void Onf_EnableChanging(bool value);
        partial void Onf_EnableChanged();
        partial void OnF_DescriptionChanging(string value);
        partial void OnF_DescriptionChanged();
        #endregion

        public T_User()
        {
            this._T_Group = default(EntityRef<T_Group>);
            OnCreated();
        }

        public List<string> Menus;

        [Column(Storage = "_F_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int F_Id
        {
            get
            {
                return this._F_Id;
            }
            set
            {
                if ((this._F_Id != value))
                {
                    this.OnF_IdChanging(value);
                    this.SendPropertyChanging();
                    this._F_Id = value;
                    this.SendPropertyChanged("F_Id");
                    this.OnF_IdChanged();
                }
            }
        }

        [Column(Storage = "_F_Name", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string F_Name
        {
            get
            {
                return this._F_Name;
            }
            set
            {
                if ((this._F_Name != value))
                {
                    this.OnF_NameChanging(value);
                    this.SendPropertyChanging();
                    this._F_Name = value;
                    this.SendPropertyChanged("F_Name");
                    this.OnF_NameChanged();
                }
            }
        }

        [Column(Storage = "_F_Password", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string F_Password
        {
            get
            {
                return this._F_Password;
            }
            set
            {
                if ((this._F_Password != value))
                {
                    this.OnF_PasswordChanging(value);
                    this.SendPropertyChanging();
                    this._F_Password = value;
                    this.SendPropertyChanged("F_Password");
                    this.OnF_PasswordChanged();
                }
            }
        }

        [Column(Storage = "_F_Value", DbType = "Int NOT NULL")]
        public int F_Value
        {
            get
            {
                return this._F_Value;
            }
            set
            {
                if ((this._F_Value != value))
                {
                    this.OnF_ValueChanging(value);
                    this.SendPropertyChanging();
                    this._F_Value = value;
                    this.SendPropertyChanged("F_Value");
                    this.OnF_ValueChanged();
                }
            }
        }

        [Column(Storage = "_F_GroupId", DbType = "Int NOT NULL")]
        public int F_GroupId
        {
            get
            {
                return this._F_GroupId;
            }
            set
            {
                if ((this._F_GroupId != value))
                {
                    if (this._T_Group.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnF_GroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._F_GroupId = value;
                    this.SendPropertyChanged("F_GroupId");
                    this.OnF_GroupIdChanged();
                }
            }
        }

        [Column(Storage = "_f_Enable", DbType = "Bit NOT NULL")]
        public bool f_Enable
        {
            get
            {
                return this._f_Enable;
            }
            set
            {
                if ((this._f_Enable != value))
                {
                    this.Onf_EnableChanging(value);
                    this.SendPropertyChanging();
                    this._f_Enable = value;
                    this.SendPropertyChanged("f_Enable");
                    this.Onf_EnableChanged();
                }
            }
        }

        [Column(Storage = "_F_Description", DbType = "NVarChar(128) NOT NULL", CanBeNull = false)]
        public string F_Description
        {
            get
            {
                return this._F_Description;
            }
            set
            {
                if ((this._F_Description != value))
                {
                    this.OnF_DescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._F_Description = value;
                    this.SendPropertyChanged("F_Description");
                    this.OnF_DescriptionChanged();
                }
            }
        }

        [Association(Name = "T_Group_T_User", Storage = "_T_Group", ThisKey = "F_GroupId", IsForeignKey = true)]
        public T_Group T_Group
        {
            get
            {
                return this._T_Group.Entity;
            }
            set
            {
                T_Group previousValue = this._T_Group.Entity;
                if (((previousValue != value)
                            || (this._T_Group.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._T_Group.Entity = null;
                        previousValue.T_User.Remove(this);
                    }
                    this._T_Group.Entity = value;
                    if ((value != null))
                    {
                        value.T_User.Add(this);
                        this._F_GroupId = value.F_Id;
                    }
                    else
                    {
                        this._F_GroupId = default(int);
                    }
                    this.SendPropertyChanged("T_Group");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.T_Group")]
    public partial class T_Group : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _F_Id;

        private string _F_Name;

        private string _F_Description;

        private EntitySet<T_User> _T_User;

        private EntitySet<T_Rule> _T_Rule;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnF_IdChanging(int value);
        partial void OnF_IdChanged();
        partial void OnF_NameChanging(string value);
        partial void OnF_NameChanged();
        partial void OnF_DescriptionChanging(string value);
        partial void OnF_DescriptionChanged();
        #endregion

        public T_Group()
        {
            this._T_User = new EntitySet<T_User>(new Action<T_User>(this.attach_T_User), new Action<T_User>(this.detach_T_User));
            this._T_Rule = new EntitySet<T_Rule>(new Action<T_Rule>(this.attach_T_Rule), new Action<T_Rule>(this.detach_T_Rule));
            OnCreated();
        }

        [Column(Storage = "_F_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int F_Id
        {
            get
            {
                return this._F_Id;
            }
            set
            {
                if ((this._F_Id != value))
                {
                    this.OnF_IdChanging(value);
                    this.SendPropertyChanging();
                    this._F_Id = value;
                    this.SendPropertyChanged("F_Id");
                    this.OnF_IdChanged();
                }
            }
        }

        [Column(Storage = "_F_Name", DbType = "NVarChar(128) NOT NULL", CanBeNull = false)]
        public string F_Name
        {
            get
            {
                return this._F_Name;
            }
            set
            {
                if ((this._F_Name != value))
                {
                    this.OnF_NameChanging(value);
                    this.SendPropertyChanging();
                    this._F_Name = value;
                    this.SendPropertyChanged("F_Name");
                    this.OnF_NameChanged();
                }
            }
        }

        [Column(Storage = "_F_Description", DbType = "NVarChar(128) NOT NULL", CanBeNull = false)]
        public string F_Description
        {
            get
            {
                return this._F_Description;
            }
            set
            {
                if ((this._F_Description != value))
                {
                    this.OnF_DescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._F_Description = value;
                    this.SendPropertyChanged("F_Description");
                    this.OnF_DescriptionChanged();
                }
            }
        }

        [Association(Name = "T_Group_T_User", Storage = "_T_User", OtherKey = "F_GroupId")]
        public EntitySet<T_User> T_User
        {
            get
            {
                return this._T_User;
            }
            set
            {
                this._T_User.Assign(value);
            }
        }

        [Association(Name = "T_Group_T_Rule", Storage = "_T_Rule", OtherKey = "F_GroupId")]
        public EntitySet<T_Rule> T_Rule
        {
            get
            {
                return this._T_Rule;
            }
            set
            {
                this._T_Rule.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_T_User(T_User entity)
        {
            this.SendPropertyChanging();
            entity.T_Group = this;
        }

        private void detach_T_User(T_User entity)
        {
            this.SendPropertyChanging();
            entity.T_Group = null;
        }

        private void attach_T_Rule(T_Rule entity)
        {
            this.SendPropertyChanging();
            entity.T_Group = this;
        }

        private void detach_T_Rule(T_Rule entity)
        {
            this.SendPropertyChanging();
            entity.T_Group = null;
        }
    }

    [Table(Name = "dbo.T_Module")]
    public partial class T_Module : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _F_Id;

        private string _F_Name;

        private string _F_Description;

        private EntitySet<T_Rule> _T_Rule;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnF_IdChanging(int value);
        partial void OnF_IdChanged();
        partial void OnF_NameChanging(string value);
        partial void OnF_NameChanged();
        partial void OnF_DescriptionChanging(string value);
        partial void OnF_DescriptionChanged();
        #endregion

        public T_Module()
        {
            this._T_Rule = new EntitySet<T_Rule>(new Action<T_Rule>(this.attach_T_Rule), new Action<T_Rule>(this.detach_T_Rule));
            OnCreated();
        }

        [Column(Storage = "_F_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int F_Id
        {
            get
            {
                return this._F_Id;
            }
            set
            {
                if ((this._F_Id != value))
                {
                    this.OnF_IdChanging(value);
                    this.SendPropertyChanging();
                    this._F_Id = value;
                    this.SendPropertyChanged("F_Id");
                    this.OnF_IdChanged();
                }
            }
        }

        [Column(Storage = "_F_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string F_Name
        {
            get
            {
                return this._F_Name;
            }
            set
            {
                if ((this._F_Name != value))
                {
                    this.OnF_NameChanging(value);
                    this.SendPropertyChanging();
                    this._F_Name = value;
                    this.SendPropertyChanged("F_Name");
                    this.OnF_NameChanged();
                }
            }
        }

        [Column(Storage = "_F_Description", DbType = "NVarChar(128) NOT NULL", CanBeNull = false)]
        public string F_Description
        {
            get
            {
                return this._F_Description;
            }
            set
            {
                if ((this._F_Description != value))
                {
                    this.OnF_DescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._F_Description = value;
                    this.SendPropertyChanged("F_Description");
                    this.OnF_DescriptionChanged();
                }
            }
        }

        [Association(Name = "T_Module_T_Rule", Storage = "_T_Rule", OtherKey = "F_ModuleId")]
        public EntitySet<T_Rule> T_Rule
        {
            get
            {
                return this._T_Rule;
            }
            set
            {
                this._T_Rule.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_T_Rule(T_Rule entity)
        {
            this.SendPropertyChanging();
            entity.T_Module = this;
        }

        private void detach_T_Rule(T_Rule entity)
        {
            this.SendPropertyChanging();
            entity.T_Module = null;
        }
    }

    [Table(Name = "dbo.T_Rule")]
    public partial class T_Rule : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _F_Id;

        private int _F_GroupId;

        private int _F_ModuleId;

        private EntityRef<T_Group> _T_Group;

        private EntityRef<T_Module> _T_Module;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnF_IdChanging(int value);
        partial void OnF_IdChanged();
        partial void OnF_GroupIdChanging(int value);
        partial void OnF_GroupIdChanged();
        partial void OnF_ModuleIdChanging(int value);
        partial void OnF_ModuleIdChanged();
        #endregion

        public T_Rule()
        {
            this._T_Group = default(EntityRef<T_Group>);
            this._T_Module = default(EntityRef<T_Module>);
            OnCreated();
        }

        [Column(Storage = "_F_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int F_Id
        {
            get
            {
                return this._F_Id;
            }
            set
            {
                if ((this._F_Id != value))
                {
                    this.OnF_IdChanging(value);
                    this.SendPropertyChanging();
                    this._F_Id = value;
                    this.SendPropertyChanged("F_Id");
                    this.OnF_IdChanged();
                }
            }
        }

        [Column(Storage = "_F_GroupId", DbType = "Int NOT NULL")]
        public int F_GroupId
        {
            get
            {
                return this._F_GroupId;
            }
            set
            {
                if ((this._F_GroupId != value))
                {
                    if (this._T_Group.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnF_GroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._F_GroupId = value;
                    this.SendPropertyChanged("F_GroupId");
                    this.OnF_GroupIdChanged();
                }
            }
        }

        [Column(Storage = "_F_ModuleId", DbType = "Int NOT NULL")]
        public int F_ModuleId
        {
            get
            {
                return this._F_ModuleId;
            }
            set
            {
                if ((this._F_ModuleId != value))
                {
                    if (this._T_Module.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnF_ModuleIdChanging(value);
                    this.SendPropertyChanging();
                    this._F_ModuleId = value;
                    this.SendPropertyChanged("F_ModuleId");
                    this.OnF_ModuleIdChanged();
                }
            }
        }

        [Association(Name = "T_Group_T_Rule", Storage = "_T_Group", ThisKey = "F_GroupId", IsForeignKey = true)]
        public T_Group T_Group
        {
            get
            {
                return this._T_Group.Entity;
            }
            set
            {
                T_Group previousValue = this._T_Group.Entity;
                if (((previousValue != value)
                            || (this._T_Group.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._T_Group.Entity = null;
                        previousValue.T_Rule.Remove(this);
                    }
                    this._T_Group.Entity = value;
                    if ((value != null))
                    {
                        value.T_Rule.Add(this);
                        this._F_GroupId = value.F_Id;
                    }
                    else
                    {
                        this._F_GroupId = default(int);
                    }
                    this.SendPropertyChanged("T_Group");
                }
            }
        }

        [Association(Name = "T_Module_T_Rule", Storage = "_T_Module", ThisKey = "F_ModuleId", IsForeignKey = true)]
        public T_Module T_Module
        {
            get
            {
                return this._T_Module.Entity;
            }
            set
            {
                T_Module previousValue = this._T_Module.Entity;
                if (((previousValue != value)
                            || (this._T_Module.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._T_Module.Entity = null;
                        previousValue.T_Rule.Remove(this);
                    }
                    this._T_Module.Entity = value;
                    if ((value != null))
                    {
                        value.T_Rule.Add(this);
                        this._F_ModuleId = value.F_Id;
                    }
                    else
                    {
                        this._F_ModuleId = default(int);
                    }
                    this.SendPropertyChanged("T_Module");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
